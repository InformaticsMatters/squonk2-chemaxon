/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.1/userguide/building_java_projects.html
 */


plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    id 'java'
    // we enable the application plugin so that we can run things using "./gradlew run ..."
    // but the container is build using the docker plugin that follows
    id 'application'

    // docker plugin
    id 'com.bmuschko.docker-java-application' version '7.3.0'
}

import static com.bmuschko.gradle.docker.tasks.image.Dockerfile.*

// set these in your ~/.gradle/gradle.properties file
def cxnMavenUser = project.hasProperty('cxnMavenUser') ? project.cxnMavenUser : 'SetMe'
def cxnMavenPassword = project.hasProperty('cxnMavenPassword') ? project.cxnMavenPassword : 'SetMe'


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    maven {
        url cxnMavenRepositoryUrl
        credentials {
            username = cxnMavenUser
            password = cxnMavenPassword
        }
    }
}

dependencies {


    // These dependencies are used by the application.
    // seems that commons cli is not available from MavenCentral
    implementation files('libs/commons-cli-1.5.0.jar')

    implementation("com.chemaxon:jchem-main:22.9.0") {

        exclude group:'com.chemaxon',module:'msketch-javahelp'
        exclude group:'com.chemaxon',module:'mview-javahelp'

        exclude group:'org.apache.poi'
        exclude group:'chemaxonlib',module:'poi'
        exclude group:'chemaxonlib',module:'ws-commons-util'

        exclude group:'mysql'
        exclude group:'org.postgresql'
        exclude group:'chemaxonlib',module:'db2jcc4'

        exclude group:'org.apache.derby'
        exclude group:'org.hsqldb'
        exclude group:'net.sf.jacob-project'
        exclude group:'com.lowagie' // itext stuff
        exclude group:'org.mariadb.jdbc'
    }


    // Use the latest Groovy version for Spock testing
    testImplementation 'org.codehaus.groovy:groovy:3.0.9'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'

}

application {
    // Define the main class for the application.
    // this can be set as a commandline option e.g.
    // ./gradlew run --args="--help" -PmainClass=squonk.jobs.chemaxon.SimpleCalcs
    mainClass = project.hasProperty("mainClass") ? project.getProperty("mainClass") : 'squonk.jobs.chemaxon.SimpleCalcs'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

docker {
    javaApplication {
        baseImage = 'openjdk:11-jre-slim'
        maintainer = 'Tim Dudgeon "tdudgeon@informaticsmatters.com"'
        ports = []
        images = ['informaticsmatters/squonk2-chemaxon:latest']
        mainClassName = 'squonk.jobs.chemaxon.SimpleCalcs'
    }
}

// This modifies the Dockerfile that is build by the docker-java-application plugin.
// The ENTRYPOINT is replaced with 'java' and the classpath arguments
// A CMD added that is '-version'.
// The expectation is that the CMD will be overridden at runtime.
dockerCreateDockerfile {
    List<Instruction> originalInstructions = new ArrayList<Instruction>(instructions.get())
    int entrypointIndex = originalInstructions
            .findIndexOf { it.keyword == EntryPointInstruction.KEYWORD}
    originalInstructions.remove(entrypointIndex)
    originalInstructions.add(new DefaultCommandInstruction("java -version"))
    originalInstructions.add(new EnvironmentVariableInstruction("CLASSPATH", "/app/resources:/app/classes:/app/libs/*"))

    instructions.set(originalInstructions)
}
